#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) | ((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
View(datos.tidy)
#preguntas iniciales: ¿necesitamos varios espectros por muestra? ¿qué correlación tienen los espectros?
#las variables relevantes son las longitudes de onda, el número de medición/barrido es un identificador
datos.tidy <-  datos.muestras %>%
gather(key = "Nbarrido", value = "Intensidad", Measure1, Measure2, Measure3,Measure4, Measure5, Measure6,Measure7, Measure8, Measure9,Measure10, Measure11) %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure"))) %>%
group_by(barrido) %>%
mutate(
#val = Intensidad[f(481.8,Wavelength)],
val = interp1(Wavelength,Intensidad,481.8),
Intensidad = Intensidad/val
) %>% #normalización
spread(key = Wavelength, value = "Intensidad") %>%
#select(-val) %>%
#select(grupo,everything()) %>% #reordenando las variables para mayor comodidad
#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) | ((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
View(datos.tidy)
rm(datos.tidy)
#preguntas iniciales: ¿necesitamos varios espectros por muestra? ¿qué correlación tienen los espectros?
#las variables relevantes son las longitudes de onda, el número de medición/barrido es un identificador
datos.tidy <-  datos.muestras %>%
gather(key = "Nbarrido", value = "Intensidad", Measure1, Measure2, Measure3,Measure4, Measure5, Measure6,Measure7, Measure8, Measure9,Measure10, Measure11) %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure"))) %>%
group_by(barrido) %>%
mutate(
#val = Intensidad[f(481.8,Wavelength)],
val = interp1(Wavelength,Intensidad,481.8),
Intensidad = Intensidad/val #normalización
) %>%
spread(key = Wavelength, value = "Intensidad") %>%
select(-val) %>%
#select(grupo,everything()) %>% #reordenando las variables para mayor comodidad
#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) | ((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
#preguntas iniciales: ¿necesitamos varios espectros por muestra? ¿qué correlación tienen los espectros?
#las variables relevantes son las longitudes de onda, el número de medición/barrido es un identificador
datos.tidy <-  datos.muestras %>%
gather(key = "Nbarrido", value = "Intensidad", Measure1, Measure2, Measure3,Measure4, Measure5, Measure6,Measure7, Measure8, Measure9,Measure10, Measure11) %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure"))) %>%
group_by(barrido) %>%
mutate(
#val = Intensidad[f(481.8,Wavelength)],
val = interp1(Wavelength,Intensidad,481.8),
Intensidad = Intensidad/val #normalización
) %>%
spread(key = Wavelength, value = "Intensidad") %>%
#select(-val) %>%
#select(grupo,everything()) %>% #reordenando las variables para mayor comodidad
#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) | ((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
View(datos.tidy)
#preguntas iniciales: ¿necesitamos varios espectros por muestra? ¿qué correlación tienen los espectros?
#las variables relevantes son las longitudes de onda, el número de medición/barrido es un identificador
datos.tidy <-  datos.muestras %>%
gather(key = "Nbarrido", value = "Intensidad", Measure1, Measure2, Measure3,Measure4, Measure5, Measure6,Measure7, Measure8, Measure9,Measure10, Measure11) %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure"))) %>%
group_by(barrido) %>%
mutate(
#val = Intensidad[f(481.8,Wavelength)],
val = interp1(Wavelength,Intensidad,481.8),
Intensidad = Intensidad/val #normalización
) %>%
spread(key = Wavelength, value = "Intensidad") %>%
select(-val) %>%
#select(grupo,everything()) %>% #reordenando las variables para mayor comodidad
#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) | ((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
View(datos.tidy)
head(datos.tidy$val)
glimpse(select(datos.tidy,-val))
glimpse(select(datos.tidy,-grupo))
glimpse(select(datos.tidy,-grupo,-val))
library(tidyverse)
detach("package:dplyr", character.only = TRUE)
library("dplyr", character.only = TRUE)
#preguntas iniciales: ¿necesitamos varios espectros por muestra? ¿qué correlación tienen los espectros?
#las variables relevantes son las longitudes de onda, el número de medición/barrido es un identificador
datos.tidy <-  datos.muestras %>%
gather(key = "Nbarrido", value = "Intensidad", Measure1, Measure2, Measure3,Measure4, Measure5, Measure6,Measure7, Measure8, Measure9,Measure10, Measure11) %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure"))) %>%
group_by(barrido) %>%
mutate(
#val = Intensidad[f(481.8,Wavelength)],
val = interp1(Wavelength,Intensidad,481.8),
Intensidad = Intensidad/val #normalización
) %>%
spread(key = Wavelength, value = "Intensidad") %>%
select(-val) %>%
#select(grupo,everything()) %>% #reordenando las variables para mayor comodidad
#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) | ((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
View(datos.tidy)
View(datos.gathered)
datos.gathered$Wavelength[datos.gathered$barrido == "PE1-B3" & datos.gathered$Wavelength < 280]
datos.gathered$Wavelength[datos.gathered$barrido == "PE1-B3" & 276 < datos.gathered$Wavelength < 280]
datos.gathered$Wavelength[datos.gathered$barrido == "PE1-B3" & between(datos.gathered$Wavelength,276,280)]
between(datos.gathered$Wavelength,276,280)
View(featurevector)
View(featurevector)
#extracción de características útiles para el análisis espectral
#recomendado por compañeros de trabajo
#lo utilizo para obtener el índice de una longitud de onda dada
featurevector <- datos.gathered %>% group_by(barrido) %>%
#mutate(val = Intensity[f(481.8,Wavelength)], Intensity = Intensity/val) %>%
summarise(w1 = f(471,Wavelength),w2 = f(474.5,Wavelength),
integral471a474.5 = trapz(Wavelength[between(Wavelength,471,474.5)],Intensity[between(Wavelength,471,474.5)]),
#integral471a474.5 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
w1 = f(488,Wavelength),w2 = f(497,Wavelength),
integral488a497 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
w1 = f(498,Wavelength),w2 = f(506,Wavelength),
integral498a506 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
w1 = f(509,Wavelength),w2 = f(515,Wavelength),
integral509a515 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
pico472.6 = Intensity[f(472.6,Wavelength)],
pico492.99 = Intensity[f(492.99,Wavelength)],
pico500.7 = Intensity[f(500.7,Wavelength)],
pico512.24 = Intensity[f(512.24,Wavelength)]
) %>%
select(-w1,-w2) %>%
column_to_rownames('barrido')
View(featurevector)
#extracción de características útiles para el análisis espectral
#recomendado por compañeros de trabajo
#lo utilizo para obtener el índice de una longitud de onda dada
featurevector <- datos.gathered %>% group_by(barrido) %>%
#mutate(val = Intensity[f(481.8,Wavelength)], Intensity = Intensity/val) %>%
summarise(#w1 = f(471,Wavelength),w2 = f(474.5,Wavelength),
#integral471a474.5 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral471a474.5 = trapz(Wavelength[between(Wavelength,471,474.5)],Intensity[between(Wavelength,471,474.5)]),
#w1 = f(488,Wavelength),w2 = f(497,Wavelength),
#integral488a497 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral488a497 = trapz(Wavelength[between(Wavelength,488,497)],Intensity[between(Wavelength,488,497)]),
#w1 = f(498,Wavelength),w2 = f(506,Wavelength),
#integral498a506 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral498a506 = trapz(Wavelength[between(Wavelength,498,506)],Intensity[between(Wavelength,498,506)]),
#w1 = f(509,Wavelength),w2 = f(515,Wavelength),
#integral509a515 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral509a515 = trapz(Wavelength[between(Wavelength,509,515)],Intensity[between(Wavelength,509,515)]),
pico472.6 = Intensity[f(472.6,Wavelength)],
pico492.99 = Intensity[f(492.99,Wavelength)],
pico500.7 = Intensity[f(500.7,Wavelength)],
pico512.24 = Intensity[f(512.24,Wavelength)]
) %>%
#select(-w1,-w2) %>%
column_to_rownames('barrido')
View(featurevector)
#extracción de características útiles para el análisis espectral
#recomendado por compañeros de trabajo
#lo utilizo para obtener el índice de una longitud de onda dada
featurevector <- datos.gathered %>% group_by(barrido) %>%
#mutate(val = Intensity[f(481.8,Wavelength)], Intensity = Intensity/val) %>%
summarise(#w1 = f(471,Wavelength),w2 = f(474.5,Wavelength),
#integral471a474.5 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral471a474.5 = trapz(Wavelength[between(Wavelength,471,474.5)],Intensity[between(Wavelength,471,474.5)]),
#w1 = f(488,Wavelength),w2 = f(497,Wavelength),
#integral488a497 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral488a497 = trapz(Wavelength[between(Wavelength,488,497)],Intensity[between(Wavelength,488,497)]),
#w1 = f(498,Wavelength),w2 = f(506,Wavelength),
#integral498a506 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral498a506 = trapz(Wavelength[between(Wavelength,498,506)],Intensity[between(Wavelength,498,506)]),
#w1 = f(509,Wavelength),w2 = f(515,Wavelength),
#integral509a515 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral509a515 = trapz(Wavelength[between(Wavelength,509,515)],Intensity[between(Wavelength,509,515)]),
#pico472.6 = Intensity[f(472.6,Wavelength)],
#pico492.99 = Intensity[f(492.99,Wavelength)],
#pico500.7  = Intensity[f(500.7 ,Wavelength)],
#pico512.24 = Intensity[f(512.24,Wavelength)]
pico472.6  = interp1(Wavelength,Intensidad,472.6 ),
pico492.99 = interp1(Wavelength,Intensidad,492.99),
pico500.7  = interp1(Wavelength,Intensidad,500.7 ),
pico512.24 = interp1(Wavelength,Intensidad,512.24)
) %>%
#select(-w1,-w2) %>%
column_to_rownames('barrido')
#extracción de características útiles para el análisis espectral
#recomendado por compañeros de trabajo
#lo utilizo para obtener el índice de una longitud de onda dada
featurevector <- datos.gathered %>% group_by(barrido) %>%
#mutate(val = Intensity[f(481.8,Wavelength)], Intensity = Intensity/val) %>%
summarise(#w1 = f(471,Wavelength),w2 = f(474.5,Wavelength),
#integral471a474.5 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral471a474.5 = trapz(Wavelength[between(Wavelength,471,474.5)],Intensity[between(Wavelength,471,474.5)]),
#w1 = f(488,Wavelength),w2 = f(497,Wavelength),
#integral488a497 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral488a497 = trapz(Wavelength[between(Wavelength,488,497)],Intensity[between(Wavelength,488,497)]),
#w1 = f(498,Wavelength),w2 = f(506,Wavelength),
#integral498a506 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral498a506 = trapz(Wavelength[between(Wavelength,498,506)],Intensity[between(Wavelength,498,506)]),
#w1 = f(509,Wavelength),w2 = f(515,Wavelength),
#integral509a515 = trapz(Wavelength[w1:w2],Intensity[w1:w2]),
integral509a515 = trapz(Wavelength[between(Wavelength,509,515)],Intensity[between(Wavelength,509,515)]),
#pico472.6 = Intensity[f(472.6,Wavelength)],
#pico492.99 = Intensity[f(492.99,Wavelength)],
#pico500.7  = Intensity[f(500.7 ,Wavelength)],
#pico512.24 = Intensity[f(512.24,Wavelength)]
pico472.6  = interp1(Wavelength,Intensity,472.6 ),
pico492.99 = interp1(Wavelength,Intensity,492.99),
pico500.7  = interp1(Wavelength,Intensity,500.7 ),
pico512.24 = interp1(Wavelength,Intensity,512.24)
) %>%
#select(-w1,-w2) %>%
column_to_rownames('barrido')
View(featurevector)
rm(f)
#preguntas iniciales: ¿necesitamos varios espectros por muestra? ¿qué correlación tienen los espectros?
#las variables relevantes son las longitudes de onda, el número de medición/barrido es un identificador
datos.tidy <-  datos.muestras %>%
gather(key = "Nbarrido", value = "Intensidad", Measure1, Measure2, Measure3,Measure4, Measure5, Measure6,Measure7, Measure8, Measure9,Measure10, Measure11) %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure"))) %>%
group_by(barrido) %>%
filter(between(Wavelength,465,520)) %>% #longitudes de onda de interés
mutate(
val = interp1(Wavelength,Intensidad,481.8),#val es temporal
Intensidad = Intensidad/val #normalización
) %>%
spread(key = Wavelength, value = "Intensidad") %>%
select(-val) %>%
#select(grupo,everything()) %>% #reordenando las variables para mayor comodidad
#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) | ((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
View(datos.tidy)
View(datos.tidy)
View(datos.tidy)
#etiquetando para facilitar trabajo futuro
datos.tidy <- column_to_rownames(datos.tidy, 'barrido')
View(datos.tidy)
#primero debería comparar espectros entre distintas señales para observar posibles anomalías
#x e y serían longitud de onda e intesidad, así que necesito ordenar los datos un poco en un nuevo tibble
datos.gathered <- datos.tidy %>%
gather(key = "Wavelength", value = "Intensity",-grupo,-archivo,-Nbarrido, convert = TRUE)
datos.gathered <- datos.gathered %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure")))
#la idea es que pueda visualizarse los espectros para compararlos, compuestos similares deberían tener el mismo espectro
datos.gathered %>% filter(grupo == "PE") %>% arrange(Wavelength) %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1))
datos.gathered %>% filter(grupo == "Pu") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1)) #parece ser que pu2 tiene problemas de calidad
datos.gathered %>% filter(grupo == "RD") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1))
datos.gathered %>% filter(grupo == "TN") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1))
datos.gathered %>% filter(grupo == "Pu") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1)) #parece ser que pu2 tiene problemas de calidad
datos.gathered %>% filter(archivo == "Pu2") %>%
ggplot(aes(x=Wavelength,y=Intensity,color= Nbarrido )) +
geom_line(aes(alpha = 0.1))
datos.tidy <- filter(datos.tidy,archivo == "Pu2" & Nbarrido == "Measure2") #así que lo remuevo
View(datos.tidy)
#preguntas iniciales: ¿necesitamos varios espectros por muestra? ¿qué correlación tienen los espectros?
#las variables relevantes son las longitudes de onda, el número de medición/barrido es un identificador
datos.tidy <-  datos.muestras %>%
gather(key = "Nbarrido", value = "Intensidad", Measure1, Measure2, Measure3,Measure4, Measure5, Measure6,Measure7, Measure8, Measure9,Measure10, Measure11) %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure"))) %>%
group_by(barrido) %>%
filter(between(Wavelength,465,520)) %>% #longitudes de onda de interés
mutate(
val = interp1(Wavelength,Intensidad,481.8),#val es temporal
Intensidad = Intensidad/val #normalización
) %>%
spread(key = Wavelength, value = "Intensidad") %>%
select(-val) %>%
#select(grupo,everything()) %>% #reordenando las variables para mayor comodidad
#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) |
((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
datos.tidy <- filter(datos.tidy,archivo != "Pu2" | Nbarrido != "Measure2") #así que lo remuevo
View(datos.tidy)
datos.gathered %>% filter(archivo == "Pu2") %>%
ggplot(aes(x=Wavelength,y=Intensity,color= Nbarrido )) +
geom_line(aes(alpha = 0.1)) #el problema es específicamente con "Measure2"
View(datos.gathered)
View(datos.gathered)
datos.gathered <- filter(datos.gathered,barrido != "Pu2-B2") #así que lo remuevo
View(datos.gathered)
datos.gathered %>% filter(archivo == "Pu2") %>%
ggplot(aes(x=Wavelength,y=Intensity,color= Nbarrido )) +
geom_line(aes(alpha = 0.1)) #el problema es específicamente con "Measure2"
#la idea es que pueda visualizarse los espectros para compararlos, compuestos similares deberían tener el mismo espectro
datos.gathered %>% filter(grupo == "PE") %>% arrange(Wavelength) %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1))
datos.gathered %>% filter(grupo == "Pu") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1)) #parece ser que pu2 tiene problemas de calidad
datos.gathered %>% filter(archivo == "Pu2") %>%
ggplot(aes(x=Wavelength,y=Intensity,color= Nbarrido )) +
geom_line(aes(alpha = 0.1)) #el problema es específicamente con "Measure2"
datos.gathered %>% filter(grupo == "RD") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1))
datos.gathered %>% filter(grupo == "TN") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1))
#preguntas iniciales: ¿necesitamos varios espectros por muestra? ¿qué correlación tienen los espectros?
#las variables relevantes son las longitudes de onda, el número de medición/barrido es un identificador
datos.tidy <-  datos.muestras %>%
gather(key = "Nbarrido", value = "Intensidad", Measure1, Measure2, Measure3,Measure4, Measure5, Measure6,Measure7, Measure8, Measure9,Measure10, Measure11) %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure"))) %>%
group_by(barrido) %>%
filter(between(Wavelength,465,520)) %>% #longitudes de onda de interés
mutate(
val = interp1(Wavelength,Intensidad,481.8),#val es temporal
Intensidad = Intensidad/val #normalización
) %>%
spread(key = Wavelength, value = "Intensidad") %>%
select(-val) %>%
#select(grupo,everything()) %>% #reordenando las variables para mayor comodidad
#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
#filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) |
#         ((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
filter((archivo %in% c("PE1", "PE2") & Nbarrido %in% c("Measure3", "Measure4", "Measure5")) | (!(archivo %in% c("PE1", "PE2")) & Nbarrido %in% c("Measure2", "Measure3", "Measure4")))
View(datos.tidy)
#la idea es que pueda visualizarse los espectros para compararlos, compuestos similares deberían tener el mismo espectro
p1 <- datos.gathered %>% filter(grupo == "PE") %>% arrange(Wavelength) %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1))
p2 <- datos.gathered %>% filter(grupo == "Pu") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1)) #parece ser que pu2 tiene problemas de calidad
p3 <- datos.gathered %>% filter(grupo == "RD") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1))
p4 <- datos.gathered %>% filter(grupo == "TN") %>%
ggplot(aes(x=Wavelength,y=Intensity,color=archivo )) +
geom_line(aes(alpha = 0.1))
?grid.arrange
library("grid")
?grid.arrange
?get_correlation
library("gridExtra")
grid.arrange(p1,p2,p3,p4,ncol = 2, nrow = 2)
library(tidyverse)
library(pheatmap)
library(gplots)
library(pracma)
library(gridExtra)
library(pheatmap)
library(gplots)
library(pracma)
library(gridExtra)
library(tidyverse)
#es más fácil de visualizar si comparo entre dos grupos
scorPEPu <- datos.tidy %>% rownames_to_column('barrido') %>%
filter(grupo == "PE" | grupo == "Pu") %>% column_to_rownames('barrido') %>%
select_if(is.numeric) %>% t() %>% cor()
pheatmap(scorPEPu)#Pu2-B2 parece ser de baja calidad
View(datos.tidy)
View(datos.tidy)
View(datos.tidy)
#etiquetando para facilitar trabajo futuro
datos.tidy <- column_to_rownames(datos.tidy, 'barrido')
datos.tidy <- filter(datos.tidy,archivo != "Pu2" | Nbarrido != "Measure2") #así que lo remuevo
#preguntas iniciales: ¿necesitamos varios espectros por muestra? ¿qué correlación tienen los espectros?
#las variables relevantes son las longitudes de onda, el número de medición/barrido es un identificador
datos.tidy <-  datos.muestras %>%
gather(key = "Nbarrido", value = "Intensidad", Measure1, Measure2, Measure3,Measure4, Measure5, Measure6,Measure7, Measure8, Measure9,Measure10, Measure11) %>%
mutate(barrido = str_c(archivo,"-B",str_remove(Nbarrido,"Measure"))) %>%
group_by(barrido) %>%
filter(between(Wavelength,465,520)) %>% #longitudes de onda de interés, determinada por el químico que obtuvo los espectros
mutate(
val = interp1(Wavelength,Intensidad,481.8),#val es temporal
Intensidad = Intensidad/val #normalización
) %>%
spread(key = Wavelength, value = "Intensidad") %>%
select(-val) %>%
#select(grupo,everything()) %>% #reordenando las variables para mayor comodidad
#luego de eso remuevo los barridos que experimentalmente se consideraron de baja calidad
#filter(((archivo == "PE1" | archivo == "PE2") & (Nbarrido == "Measure3" | Nbarrido == "Measure4" | Nbarrido == "Measure5") ) |
#         ((archivo != "PE1" & archivo != "PE2") & (Nbarrido == "Measure2" | Nbarrido == "Measure3" | Nbarrido == "Measure4")))
filter((archivo %in% c("PE1", "PE2") & Nbarrido %in% c("Measure3", "Measure4", "Measure5")) | (!(archivo %in% c("PE1", "PE2")) & Nbarrido %in% c("Measure2", "Measure3", "Measure4")))
#etiquetando para facilitar trabajo futuro
datos.tidy <- column_to_rownames(datos.tidy, 'barrido')
datos.tidy <- datos.tidy%>% rownames_to_column('barrido') %>%
filter(archivo != "Pu2" | Nbarrido != "Measure2") %>% #así que lo remuevo
column_to_rownames('barrido')
View(datos.tidy)
#es más fácil de visualizar si comparo entre dos grupos
scorPEPu <- datos.tidy %>% rownames_to_column('barrido') %>%
filter(grupo == "PE" | grupo == "Pu") %>% column_to_rownames('barrido') %>%
select_if(is.numeric) %>% t() %>% cor()
pheatmap(scorPEPu)
#PCA
df_pca <- datos.tidy %>% select(-grupo,-archivo,-Nbarrido) %>% prcomp(scale. = F) #la normalización no me permite escalar
df_out <- as.data.frame(df_pca$x)
labels <- datos.tidy %>% select(grupo,archivo,Nbarrido) %>% rownames_to_column('barrido')
df_out <- df_out %>% rownames_to_column('barrido') %>%
left_join(labels, by = 'barrido') %>% column_to_rownames('barrido')
screeplot(df_pca)#las primeras dos componentes son suficientes
ggplot(df_out,aes(x=PC1,y=PC2,color=grupo )) + geom_point() + xlim(-10.85,-10.6)
ggplot(df_out,aes(x=PC1,y=PC2,color=grupo )) + geom_point() + xlim()
ggplot(df_out,aes(x=PC1,y=PC2,color=grupo )) + geom_point() #+ xlim()
ggplot(df_out,aes(x=PC1,y=PC2,color=Nbarrido )) + geom_point() #+ xlim()
#extracción de características útiles para el análisis espectral
#recomendado por compañeros de trabajo
#lo utilizo para obtener el índice de una longitud de onda dada
featurevector <- datos.gathered %>% group_by(barrido) %>%
summarise(
integral471a474.5 = trapz(Wavelength[between(Wavelength,471,474.5)],Intensity[between(Wavelength,471,474.5)]),
integral488a497   = trapz(Wavelength[between(Wavelength,488,497  )],Intensity[between(Wavelength,488,497  )]),
integral498a506   = trapz(Wavelength[between(Wavelength,498,506  )],Intensity[between(Wavelength,498,506  )]),
integral509a515   = trapz(Wavelength[between(Wavelength,509,515  )],Intensity[between(Wavelength,509,515  )]),
pico472.6  = interp1(Wavelength,Intensity,472.6 ),
pico492.99 = interp1(Wavelength,Intensity,492.99),
pico500.7  = interp1(Wavelength,Intensity,500.7 ),
pico512.24 = interp1(Wavelength,Intensity,512.24)
) %>%
column_to_rownames('barrido')
featurepca <- prcomp(featurevector,scale. = TRUE)
featureout <- as.data.frame(featurepca$x)
featureout <- featureout %>% rownames_to_column('barrido') %>%
left_join(labels, by = 'barrido') %>% column_to_rownames('barrido')
screeplot(featurepca)#las primeras dos componentes son suficientes
ggplot(featureout,aes(x=PC1,y=PC2,color=grupo )) + geom_point() + xlim(-1.5,1.5)
ggplot(featureout,aes(x=PC2,y=PC3,color=grupo )) + geom_point()
ggplot(featureout,aes(x=PC1,y=PC2,color=grupo )) + geom_point() #+ xlim(-1.5,1.5)
shapiro.test(df_out$PC1[df_out$grupo == "PE"])
shapiro.test(df_out$PC1[df_out$grupo == "Pu"])
shapiro.test(df_out$PC1[df_out$grupo == "RD"])
shapiro.test(df_out$PC1[df_out$grupo == "TN"])
bartlett.test(PC1~grupo,df_out)
screeplot(df_pca)#las primeras dos componentes son suficientes
aov_res <- aov(PC1 ~ grupo, data = df_out)
summary (aov_res)
TukeyHSD(aov_res)
shapiro.test(df_out$PC2[df_out$grupo == "PE"])
shapiro.test(df_out$PC2[df_out$grupo == "Pu"])
shapiro.test(df_out$PC2[df_out$grupo == "RD"])
shapiro.test(df_out$PC2[df_out$grupo == "TN"])
bartlett.test(PC2~grupo,df_out)
aov_res <- aov(PC2 ~ grupo, data = df_out)
summary (aov_res)
TukeyHSD(aov_res)
manova_res <- manova(cbind(PC1,PC2) ~ grupo, data = df_out)
summary(manova_res)
summary.aov(manova_res)
TukeyHSD(manova_res)
#PCA
df_pca <- datos.tidy %>% select(-grupo,-archivo,-Nbarrido) %>% prcomp(scale. = T) #la normalización no me permite escalar
library(pheatmap)
library(gplots)
library(pracma)
library(gridExtra)
library(tidyverse)
#PCA
df_pca <- datos.tidy %>% select(-grupo,-archivo,-Nbarrido) %>% prcomp(scale. = T) #la normalización no me permite escalar
df_out <- as.data.frame(df_pca$x)
labels <- datos.tidy %>% select(grupo,archivo,Nbarrido) %>% rownames_to_column('barrido')
df_out <- df_out %>% rownames_to_column('barrido') %>%
left_join(labels, by = 'barrido') %>% column_to_rownames('barrido')
screeplot(df_pca)#las primeras dos componentes son suficientes
ggplot(df_out,aes(x=PC1,y=PC2,color=grupo )) + geom_point() #+ xlim()
?mshapiro.test
install.packages("mvnormtest")
library(mvnormtest)
mshapiro.test(df_out[PC1:PC2])
View(df_out)
mshapiro.test(df_out["PC1":"PC2"])
mshapiro.test(df_out[0:1])
df_out[0]
mshapiro.test(select(df_out,PC1,PC2))
mshapiro.test(select(df_out,PC1,PC2,PC3))
select(df_out,PC1,PC2,PC3)
df_out["PC1"]
df_out["PC1":"PC2"]
mshapiro.test(as.matrix(select(df_out,PC1,PC2,PC3)))
mshapiro.test(cbind(df_out$PC1,df_out$PC2))
shapiro.test(df_out$PC2[df_out$grupo == "TN"])
#Pregunta: ¿puedo explicar alguna de las diferencias entre los grupos mediante alguna PC?
#si bien es cierto que el gráfico indica que probablemente no alguna conclusión puede obtenerse
shapiro.test(df_out$PC1[df_out$grupo == "PE"])
shapiro.test(df_out$PC2[df_out$grupo == "PE"])
shapiro.test(df_out$PC1[df_out$grupo == "Pu"])
shapiro.test(df_out$PC2[df_out$grupo == "Pu"])
shapiro.test(df_out$PC1[df_out$grupo == "RD"])
shapiro.test(df_out$PC2[df_out$grupo == "RD"])
shapiro.test(df_out$PC1[df_out$grupo == "TN"])
shapiro.test(df_out$PC2[df_out$grupo == "TN"])
bartlett.test(PC1~grupo,df_out)
aov_res <- aov(PC1 ~ grupo, data = df_out)
summary (aov_res)
TukeyHSD(aov_res)
kruskal.test(PC2 ~ grupo, data = df_out)
pairwise.wilcox.test(df_out$PC2, df_out$grupo,p.adjust.method = "BH")
rm(manova_res)
#Analizo las PC
shapiro.test(featureout$PC1[featureout$grupo == "PE"])
shapiro.test(featureout$PC2[featureout$grupo == "PE"])
shapiro.test(featureout$PC1[featureout$grupo == "Pu"])
shapiro.test(featureout$PC2[featureout$grupo == "Pu"])
shapiro.test(featureout$PC1[featureout$grupo == "RD"])
shapiro.test(featureout$PC2[featureout$grupo == "RD"])
shapiro.test(featureout$PC1[featureout$grupo == "TN"])
shapiro.test(featureout$PC2[featureout$grupo == "TN"])#PC1 normal, PC2 no
bartlett.test(PC1~grupo,df_out)#varianzas homogéneas
bartlett.test(PC1~grupo,featureout)#varianzas homogéneas
bartlett.test(PC2~grupo,featureout)
manova_res <- manova(cbind(PC1,PC2) ~ grupo, data = featureout)
summary(manova_res)
summary.aov(manova_res)
screeplot(featurepca)#las primeras dos componentes son suficientes
ggplot(featureout,aes(x=PC1,y=PC2,color=grupo )) + geom_point() #+ xlim(-1.5,1.5)
aov_res <- aov(PC2 ~ grupo, data = featureout)
summary (aov_res)#PC1 no es suficientemente bueno para dividir entre grupos
TukeyHSD(aov_res)
